/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // Support for generating project metadata
    id 'eclipse'
    id 'org.hidetake.ssh' version '2.10.1'
    // Interactive shell
    id 'com.github.mrsarm.jshell.plugin' version '1.2.1'
    // Benchmarking
    id 'me.champeau.jmh' version '0.7.1'
    // Offline dependencies
    id 'com.dimaslanjaka.gradle.offline_dependencies' version '1.0.15'
    id 'org.ysb33r.ivypot' version '1.0.0'
}

def cv_win = 'C:/opencv-4.6.0/java/opencv-460.jar'
def cv_lin = '/opt/opencv-4.6.0/share/java/opencv4/opencv-460.jar'

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.fazecast:jSerialComm:[2.0.0,3.0.0)'

    if(System.properties['os.name'].toLowerCase().contains('win')){
        implementation files(cv_win)
    }else{
        implementation files(cv_lin)
    }
    implementation 'org.openpnp:opencv:4.6.0-0'

	// Add tensorflow
	//implementation group: 'org.bytedeco', name: 'javacpp', version: '1.5.9'
	//implementation 'org.bytedeco:javacpp:1.5.9'
	//implementation 'org.bytedeco:javacpp:1.5.9:linux-arm64'
	//implementation 'org.tensorflow:tensorflow-core-platform-gpu:0.4.0'
	//implementation 'org.tensorflow:tensorflow-core-api:0.4.0:linux-x86'
}

mainClassName = "org.aquapackrobotics.sw8s.App"

java {
    // Set Java version to 17
    // https://docs.gradle.org/current/userguide/toolchains.html
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

tasks.withType(JavaCompile) {
    options.release = 17
}

run {
    standardInput = System.in
}

jar {
    manifest {
        attributes(
            'Main-Class': "$mainClassName"
        )
    }
}

task fatJar(type: Jar) {
    dependsOn build
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

task perfJar(type: Jar) {
    dependsOn build
}

remotes {
    orangePi {
        host = '192.168.2.5'
        user = 'sw8'
        identity = file('.sw8_ssh_identity')
        password = file('.sw8_password').getText('UTF-8').trim()
    }
}

task deploy {
    dependsOn fatJar
    doLast {
        ssh.run {
            session(remotes.orangePi) {
                execute "sudo -S mount -o remount,rw /", inputStream: remotes.orangePi.password
                put from: "$buildDir/libs/app.jar", into: 'app.jar'
                execute "sudo -S mount -o remount,ro /", inputStream: remotes.orangePi.password }
        }
    }
}

repositories {
    if (gradle.startParameter.offline) {
        // Use local ivy repo
        ivy {
            url "file://${projectDir}/../dependencies"
            layout 'gradle'
        }
        mavenLocal()
    } else {
        // Use Maven Central for resolving dependencies.
        mavenCentral()
    }
}

jmh {
    failOnError = true
    warmup = '5s'
}

syncRemoteRepositories {
  repoDetails{
    root = "${projectDir}/../dependencies"
  }

  repositories {
    mavenCentral()
    maven {
        url 'https://plugins.gradle.org/m2'
    }
  }

  includeBuildScriptDependencies = true
}


task sync(type:Exec) {
    workingDir = "${projectDir}/../ivypot"
    executable = 'sh'
    args = ['-c', './gradlew syncRemoteRepositories']
}

task push {
    doLast {
        ssh.run {
            session(remotes.orangePi) {
                execute "sudo -S mount -o remount,rw /", inputStream: remotes.orangePi.password
                execute "mkdir -p SW8S-Java/app/build/distributions/"
            }
        }
        exec {
            executable = 'ssh'
            args = ['-i', '.sw8_ssh_identity', 'sw8@192.168.2.5', 'sudo date --set @$(date -u +%s)']
        }
        exec {
            executable = 'rsync'
            args = ['-ae', 'ssh -i .sw8_ssh_identity', '--exclude', '/.git', '--filter', ':- .gitignore', '../', '--size-only', 'sw8@192.168.2.5:SW8S-Java']
        }
        exec {
            executable = 'rsync'
            args = ['-ae', 'ssh -i .sw8_ssh_identity', '../dependencies', '--size-only', 'sw8@192.168.2.5:SW8S-Java']
        }
        ssh.run {
            session(remotes.orangePi) {
                execute "cd SW8S-Java && ./gradlew --offline -x test jar"
            }
        }
    }
}

// ChatGPT and search engine, lol
task testPath(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE) // https://stackoverflow.com/questions/67265308/gradle-entry-classpath-is-a-duplicate-but-no-duplicate-handling-strategy-has-b

    dependsOn test

    manifest {
        attributes 'Main-Class': 'org.aquapackrobotics.sw8s.TestRunner'
    }

    from(sourceSets.test.output) {
        include 'org/aquapackrobotics/sw8s/TestRunner.class'
        include 'org/aquapackrobotics/sw8s/vision/BaseMatrix.class'
    }

    //classifier = 'all'
    from {
        configurations.testRuntimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar

    // Set the destination directory and JAR file name
    destinationDirectory = file("$buildDir/libs")
    archiveFileName = "test-jar-path.jar"
}

distributions {
    main {
        distributionBaseName = 'someName'
        distributionClassifier = 'classifier'
        contents {
            from 'models/'
        }
    }
}

application {
    // Define the main class for the application.
    mainClass = mainClassName
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}
