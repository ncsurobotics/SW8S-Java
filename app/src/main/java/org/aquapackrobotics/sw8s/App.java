/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.aquapackrobotics.sw8s;

import java.io.IOException;
import java.util.concurrent.ScheduledThreadPoolExecutor;

import org.aquapackrobotics.sw8s.missions.*;
import org.opencv.videoio.VideoCapture;
import org.aquapackrobotics.sw8s.comms.*;

import java.util.concurrent.*;

import org.opencv.core.Mat;

public class App {

    static {
        System.setProperty("java.util.logging.SimpleFormatter.format",
                "%1$tF %1$tT | %4$s | %5$s %n");
    }

    // static final int POOLSIZE = 16;
    static final int POOLSIZE = 128;
    // static final int POOLSIZE = 8;

    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws ExecutionException, InterruptedException, IOException {
        String helpFlag[] = { "\nBasic Utility:",
                "\n'test' -- The Command Flag used in Testing",
                "'help' or 'h' -- displays list of command flags", "\nStates:", "\n" };
        System.out.println("Basic Format: gradle run --args='_'");

        /* Special case for testing without control board connection */
        if (args.length == 1 && args[0].equals("--local_comm_test")) {
            System.out.println("COMM TEST");
            Mission missionComms = (Mission) new LocalComms(null, 5000);
            missionComms.run();
            System.exit(0);
        }

        ScheduledThreadPoolExecutor pool = new ScheduledThreadPoolExecutor(POOLSIZE);
        ControlBoardThreadManager manager;

        CameraFeedSender.openCapture(0);
        System.out.println("POST FEED 1");
        CameraFeedSender.openCapture(1);
        System.out.println("POST FEEDS");

        for (String str : args) {
            Mission mission;
            switch (str) {
                case "--test":
                    System.out.println("Yay! it worked!");
                    System.exit(0);
                case "-h":
                    for (int i = 0; i < helpFlag.length; i++) {
                        System.out.println(helpFlag[i]);
                    }
                    System.exit(0);
                case "--help":
                    for (int i = 0; i < helpFlag.length; i++) {
                        System.out.println(helpFlag[i]);
                    }
                    System.exit(0);
                case "--raw_test":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new Raw_Test(manager);
                    break;
                case "--local_test":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new Local_Test(manager);
                    break;
                case "--manual":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new ManualMission(manager, 5000);
                    break;
                case "--motor_test":
                    System.out.println("REGISTER MOTOR TEST");
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new MotorTest(manager);
                    break;
                case "--submerge_test":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new SubmergeTest(manager);
                    break;
                case "--local_comms":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new LocalComms(manager, 5000);
                    break;
                case "--receive_test":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new ReceiveTest(manager);
                    break;
                case "--gate":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new Gate(manager);
                    break;
                case "--gate_stability":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new StabilityGate(manager);
                    break;
                case "--path":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new Path(manager);
                    break;
                case "--path-test":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new PathVisionTest(manager);
                    break;
                case "--buoy":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new Buoys(manager);
                    break;
                case "--cam_test":
                    CameraFeedSender.openCapture(0);
                    // CameraFeedSender.openCapture(1);
                    Thread.sleep(60_000);
                case "--octagon":
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new Octagon(manager);
                    break;
                case "--kill-confirm":
                    while (true) {
                        try {
                            manager = new ControlBoardThreadManager(pool);
                            manager.setMotorSpeeds((float) 0.3, (float) 0.0, (float) 0.0, (float) 0.0,
                                    (float) 0.0,
                                    (float) 0.0, (float) 0.0, (float) 0.0).wait();
                            while (true)
                                ;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                default:
                    manager = new ControlBoardThreadManager(pool);
                    mission = (Mission) new AutoMission(manager);
                    break;

            }
            System.out.println("RUN TEST");
            mission.run();
        }
        System.exit(0);
    }
}
